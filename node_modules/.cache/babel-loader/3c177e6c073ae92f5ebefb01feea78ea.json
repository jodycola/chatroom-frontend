{"ast":null,"code":"var _jsxFileName = \"/Users/kody/code/chat/client/src/components/Message.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Message({\n  message,\n  messageList\n}) {\n  _s();\n\n  // State and variables\n  const [testing, setTesting] = useState([]); // useEffect to grab Chatroom messages\n\n  useEffect(() => {\n    fetch(`http://localhost:3000/room/General`).then(res => res.json()).then(data => setTesting({ ...testing,\n      data\n    }));\n  }, [testing, setTesting]); // Display messages as mapped product in JSX\n\n  const displayMessage = testing.map((message, index) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `text ${message.currentUser ? \"my-message\" : \"received-message\"}`,\n      children: [\" \", message, \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }); // const displayMessage = messageList.map((message, index) => {\n  //     return <p key={index} className={`text ${message.currentUser ? \"my-message\" : \"received-message\"}`}> {message} </p>\n  // })\n\n  return /*#__PURE__*/_jsxDEV(MessageStyle, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: displayMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n} // CSS\n\n_s(Message, \"+n6K9JmD476Efm34ZM3yaS/BWIQ=\");\n\n_c = Message;\nconst MessageStyle = styled.div`\n.container {\n    display: flex;\n    width: 20%;\n}\n\n.box {\n    position: relative;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.text {\n    display: inline-block;\n    position: relative;\n    flex: auto;\n    overflow: auto;\n    color: #FFF;\n    background-image: linear-gradient(#99c2ff, #0066ff);\n    padding: 10px 10px;\n    font-size: 25px;\n    border-radius: 10px;\n    width: 100%;\n    letter-spacing: 0;\n    font-size: 1.5em;\n    word-wrap: break-word;\n}\n\n`;\n_c2 = MessageStyle;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"MessageStyle\");","map":{"version":3,"sources":["/Users/kody/code/chat/client/src/components/Message.js"],"names":["React","useState","useEffect","styled","Message","message","messageList","testing","setTesting","fetch","then","res","json","data","displayMessage","map","index","currentUser","MessageStyle","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAjB,EAA2C;AAAA;;AAEtD;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC,CAHsD,CAKtD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,KAAK,CAAE,oCAAF,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIL,UAAU,CAAC,EACrB,GAAGD,OADkB;AACTM,MAAAA;AADS,KAAD,CAFxB;AAKH,GANQ,EAMN,CAACN,OAAD,EAAUC,UAAV,CANM,CAAT,CANsD,CActD;;AACA,QAAMM,cAAc,GAAGP,OAAO,CAACQ,GAAR,CAAY,CAACV,OAAD,EAAUW,KAAV,KAAoB;AACnD,wBAAO;AAAe,MAAA,SAAS,EAAG,QAAOX,OAAO,CAACY,WAAR,GAAsB,YAAtB,GAAqC,kBAAmB,EAA1F;AAAA,sBAA+FZ,OAA/F;AAAA,OAAQW,KAAR;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFsB,CAAvB,CAfsD,CAkBtD;AACA;AACA;;AAEA,sBACI,QAAC,YAAD;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACKF;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,C,CAED;;GAjCwBV,O;;KAAAA,O;AAmCxB,MAAMc,YAAY,GAAGf,MAAM,CAACgB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5BA;MAAMD,Y","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nexport default function Message({ message, messageList }) {\n    \n    // State and variables\n    const [testing, setTesting] = useState([]);\n\n    // useEffect to grab Chatroom messages\n    useEffect(() => {\n        fetch(`http://localhost:3000/room/General`)\n        .then(res => res.json())\n        .then(data => setTesting({\n            ...testing, data\n        }))\n    }, [testing, setTesting]);\n\n    // Display messages as mapped product in JSX\n    const displayMessage = testing.map((message, index) => {\n        return <p key={index} className={`text ${message.currentUser ? \"my-message\" : \"received-message\"}`}> {message} </p>\n    })\n    // const displayMessage = messageList.map((message, index) => {\n    //     return <p key={index} className={`text ${message.currentUser ? \"my-message\" : \"received-message\"}`}> {message} </p>\n    // })\n\n    return (\n        <MessageStyle>\n        <div className=\"container\">\n            <div className=\"box\">\n                {displayMessage}\n            </div>\n        </div>\n        </MessageStyle>\n    )\n}\n\n// CSS\n\nconst MessageStyle = styled.div`\n.container {\n    display: flex;\n    width: 20%;\n}\n\n.box {\n    position: relative;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.text {\n    display: inline-block;\n    position: relative;\n    flex: auto;\n    overflow: auto;\n    color: #FFF;\n    background-image: linear-gradient(#99c2ff, #0066ff);\n    padding: 10px 10px;\n    font-size: 25px;\n    border-radius: 10px;\n    width: 100%;\n    letter-spacing: 0;\n    font-size: 1.5em;\n    word-wrap: break-word;\n}\n\n`"]},"metadata":{},"sourceType":"module"}