{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\n\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useMessage = (currentUser, room) => {\n  _s();\n\n  const [messages, setMessages] = useState([]); // Sent and received messages\n\n  const socketRef = useRef();\n  console.log(currentUser);\n  const roomname = Object.values(currentUser)[2];\n  console.log(roomname);\n  useEffect(() => {\n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        room\n      }\n    }); // Listens for incoming messages\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        sender: currentUser.name\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    }); // Destroys the socket reference\n    // when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [currentUser, room]); // Sends a message to the server that\n  // forwards it to all users in the same room\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      sender: currentUser.name\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\n_s(useMessage, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n\nexport default useMessage;","map":{"version":3,"sources":["/Users/kody/code/react-chat/client/src/hooks/useMessage.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useMessage","currentUser","room","messages","setMessages","socketRef","console","log","roomname","Object","values","current","query","on","message","incomingMessage","sender","name","disconnect","sendMessage","messageBody","emit","body"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B,C,CAAiD;;AACjD,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,IAAd,KAAuB;AAAA;;AACxC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC,CADwC,CACM;;AAC9C,QAAMS,SAAS,GAAGV,MAAM,EAAxB;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AAEA,QAAMO,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcT,WAAd,EAA2B,CAA3B,CAAjB;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AAIAd,EAAAA,SAAS,CAAC,MAAM;AAEd;AACAW,IAAAA,SAAS,CAACM,OAAV,GAAoBd,cAAc,CAACE,iBAAD,EAAoB;AACpDa,MAAAA,KAAK,EAAE;AAAEV,QAAAA;AAAF;AAD6C,KAApB,CAAlC,CAHc,CAOd;;AACAG,IAAAA,SAAS,CAACM,OAAV,CAAkBE,EAAlB,CAAqBf,sBAArB,EAA8CgB,OAAD,IAAa;AACxD,YAAMC,eAAe,GAAG,EACtB,GAAGD,OADmB;AAEtBE,QAAAA,MAAM,EAAEf,WAAW,CAACgB;AAFE,OAAxB;AAIAb,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcY,eAAd,CAAf,CAAX;AACD,KAND,EARc,CAgBd;AACA;;AACA,WAAO,MAAM;AACXV,MAAAA,SAAS,CAACM,OAAV,CAAkBO,UAAlB;AACD,KAFD;AAGD,GArBQ,EAqBN,CAACjB,WAAD,EAAcC,IAAd,CArBM,CAAT,CAZwC,CAmCxC;AACA;;AACA,QAAMiB,WAAW,GAAIC,WAAD,IAAiB;AACnCf,IAAAA,SAAS,CAACM,OAAV,CAAkBU,IAAlB,CAAuBvB,sBAAvB,EAA+C;AAC7CwB,MAAAA,IAAI,EAAEF,WADuC;AAE7CJ,MAAAA,MAAM,EAAEf,WAAW,CAACgB;AAFyB,KAA/C;AAID,GALD;;AAOA,SAAO;AAAEd,IAAAA,QAAF;AAAYgB,IAAAA;AAAZ,GAAP;AACD,CA7CD;;GAAMnB,U;;AA+CN,eAAeA,UAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useMessage = (currentUser, room) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n  const socketRef = useRef();\n\n  console.log(currentUser);\n\n  const roomname = Object.values(currentUser)[2];\n\n  console.log(roomname)\n\n\n\n  useEffect(() => {\n\n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { room },\n    });\n    \n    // Listens for incoming messages\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        sender: currentUser.name\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    \n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [currentUser, room]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      sender: currentUser.name\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useMessage;"]},"metadata":{},"sourceType":"module"}