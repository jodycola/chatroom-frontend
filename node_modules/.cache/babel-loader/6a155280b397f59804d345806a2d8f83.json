{"ast":null,"code":"var _jsxFileName = \"/Users/kody/code/chat/client/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport Input from './Input';\nimport Message from './Message';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat({\n  currentUser\n}) {\n  _s();\n\n  // States & variables\n  const [name, setName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const socket = io('http://localhost:4000/');\n  const room = new URLSearchParams(window.location.search).get('room'); // Listens on socket\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessageList([...messageList, message]);\n    });\n  }); // Grab the User name\n\n  useEffect(() => {\n    setName(Object.values(currentUser)[1]);\n    console.log(name);\n  }); // Handlers\n  // Add fetch to update messages in a given chatroom\n\n  const handleSendMessage = e => {\n    e.preventDefault();\n\n    try {\n      // socket.emit('message',  [ name, message ] )\n      fetch(`http://localhost:3000/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          name,\n          room\n        })\n      }).then(res => res.json()).then(data => setMessageList(data));\n    } catch (error) {\n      console.log(error);\n    }\n\n    setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatStyled, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-title\",\n      children: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [messageList.length === 0 ? null : /*#__PURE__*/_jsxDEV(Message, {\n        currentUser: currentUser,\n        message: message,\n        messageList: messageList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        handleSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n} // CSS\n// @media (min-width: 320px) and (max-width: 480px) {\n//   .container {\n//     height: 100%;\n//     width: 100%;\n//   }\n// }\n// @media (min-width: 480px) and (max-width: 1200px) {\n//   .container {\n//     width: 100%;\n//   }\n// }\n\n_s(Chat, \"6Zm2YWLwW0bdhrZobHpuXMMbGvs=\");\n\n_c = Chat;\nconst ChatStyled = styled.div`\n.room-title {\n  text-transform: capitalize;\n  font-size: 36px;\n  color: #FFF;\n  border-bottom: 2px #FFF solid;\n}\n\n.container {\n  position: relative;\n  margin: auto;\n  height: 500px;\n  width: 70%;\n  background-color: white;\n}\n\n`;\n_c2 = ChatStyled;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"ChatStyled\");","map":{"version":3,"sources":["/Users/kody/code/chat/client/src/components/Chat.js"],"names":["React","useState","useEffect","io","Input","Message","styled","Chat","currentUser","name","setName","message","setMessage","messageList","setMessageList","socket","room","URLSearchParams","window","location","search","get","on","Object","values","console","log","handleSendMessage","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","data","error","length","ChatStyled","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport Input from './Input';\nimport Message from './Message';\nimport styled from 'styled-components';\n\nexport default function Chat({ currentUser }) {\n\n    // States & variables\n    const [name, setName] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n    const [messageList, setMessageList] = useState([]);\n    const socket = io('http://localhost:4000/')\n    const room = (new URLSearchParams(window.location.search)).get('room');\n\n    // Listens on socket\n    useEffect(() => {\n      socket.on('message', message => {\n      setMessageList([...messageList, message])\n      })\n    })\n\n    // Grab the User name\n    useEffect(() => {\n      setName(Object.values(currentUser)[1]);\n      console.log(name);\n    })\n\n    // Handlers\n    // Add fetch to update messages in a given chatroom\n    const handleSendMessage = (e) => {\n      e.preventDefault();\n      try {\n        // socket.emit('message',  [ name, message ] )\n        fetch(`http://localhost:3000/add`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({message, name, room})\n        })\n        .then(res => res.json())\n        .then(data => setMessageList(data))\n      } catch (error) {\n        console.log(error);\n      }\n      setMessage('');\n    };\n\n    return (\n        <ChatStyled>\n        <h1 className=\"room-title\">{room}</h1>\n        <div className=\"container\">\n            {messageList.length === 0 ? null :  <Message currentUser={currentUser} message={message} messageList={messageList}/> }\n            <Input message={message} setMessage={setMessage} handleSendMessage={handleSendMessage} />\n        </div>\n        </ChatStyled>\n    )\n}\n\n// CSS\n// @media (min-width: 320px) and (max-width: 480px) {\n//   .container {\n//     height: 100%;\n//     width: 100%;\n//   }\n// }\n\n// @media (min-width: 480px) and (max-width: 1200px) {\n//   .container {\n//     width: 100%;\n//   }\n// }\nconst ChatStyled = styled.div`\n.room-title {\n  text-transform: capitalize;\n  font-size: 36px;\n  color: #FFF;\n  border-bottom: 2px #FFF solid;\n}\n\n.container {\n  position: relative;\n  margin: auto;\n  height: 500px;\n  width: 70%;\n  background-color: white;\n}\n\n`"]},"metadata":{},"sourceType":"module"}